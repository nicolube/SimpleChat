package de.nicolube.simplechat.client;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import de.nicolube.simplechat.common.CachedMessage;
import de.nicolube.simplechat.common.User;
import lombok.Getter;
import lombok.SneakyThrows;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

@Getter
public class MainPanel {
    private final JPanel chatListPanel;
    private JPanel mainPanel;
    private JButton sendButton;
    private JTextField chatField;
    private JTextPane userListPane;
    private JPanel chatContainerPanel;
    private JScrollPane chatScrollPane;
    private JCheckBox autoscorllCheckBox;
    private JCheckBox notificationCheckBox;
    private JButton logoutButton;
    private final Client client;

    public MainPanel(Client client) {
        this.client = client;
        this.chatListPanel = new JPanel();
        this.chatListPanel.setLayout(new BoxLayout(this.chatListPanel, BoxLayout.Y_AXIS));
        this.chatContainerPanel.add(chatListPanel);

        this.sendButton.addActionListener(e -> {
            if (chatField.getText().isEmpty()) return;
            client.sendMessage(chatField.getText());
            chatField.setText("");
        });
        this.logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                client.logout();
                client.getMainFrame().loginPanel();
            }
        });
    }


    public void addMessage(CachedMessage cachedMessage, ReceiveType type) {
        ChatMessagePanel panel = new ChatMessagePanel(cachedMessage.getUser(), cachedMessage.getMessage());
        Color color = getReceiveTypeColor(type, panel.getUsernameLabel().getForeground());
        panel.getUsernameLabel().setForeground(color);
        postAddMessage(panel);
    }

    @SneakyThrows
    public void addMessage(User sender, String message, ReceiveType type) {
        ChatMessagePanel panel = new ChatMessagePanel(sender, message);
        Color color = getReceiveTypeColor(type, panel.getUsernameLabel().getForeground());
        panel.getUsernameLabel().setForeground(color);
        switch (type) {
            case POKED:
                Sounds.playAudio("/sounds/notification.wav", 75);
                break;
            case OTHER:
                if (this.notificationCheckBox.isSelected()) Sounds.playAudio("/sounds/notification.wav", 75);
        }
        postAddMessage(panel);
    }

    private void postAddMessage(ChatMessagePanel panel) {
        this.chatListPanel.add(panel.getMessagePanel());
        this.client.getMainFrame().revalidate();
        if (this.autoscorllCheckBox.isSelected()) {
            JScrollBar vertical = this.chatScrollPane.getVerticalScrollBar();
            vertical.setValue(vertical.getMaximum());
        }
    }

    private Color getReceiveTypeColor(ReceiveType type, Color fallback) {
        switch (type) {
            case SELF:
                return new Color(44, 111, 31);
            case POKED:
                return new Color(127, 32, 32);
            case PRIVATE:
                return new Color(0, 117, 127);
            default:
                return fallback == null ? new Color(0, 0, 0) : fallback;
        }
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 3, new Insets(10, 10, 10, 10), -1, -1));
        chatField = new JTextField();
        mainPanel.add(chatField, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        mainPanel.add(sendButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setVerticalScrollBarPolicy(21);
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(100, -1), null, null, 0, false));
        userListPane = new JTextPane();
        userListPane.setEditable(false);
        userListPane.setText("");
        scrollPane1.setViewportView(userListPane);
        chatScrollPane = new JScrollPane();
        chatScrollPane.setHorizontalScrollBarPolicy(31);
        panel1.add(chatScrollPane, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        chatScrollPane.setViewportView(panel2);
        chatContainerPanel = new JPanel();
        chatContainerPanel.setLayout(new BorderLayout(0, 0));
        panel2.add(chatContainerPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JToolBar toolBar1 = new JToolBar();
        mainPanel.add(toolBar1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        autoscorllCheckBox = new JCheckBox();
        autoscorllCheckBox.setSelected(true);
        autoscorllCheckBox.setText("autoscorll");
        toolBar1.add(autoscorllCheckBox);
        notificationCheckBox = new JCheckBox();
        notificationCheckBox.setSelected(true);
        notificationCheckBox.setText("notification");
        toolBar1.add(notificationCheckBox);
        final Spacer spacer1 = new Spacer();
        toolBar1.add(spacer1);
        logoutButton = new JButton();
        logoutButton.setHorizontalAlignment(0);
        logoutButton.setHorizontalTextPosition(11);
        logoutButton.setText("Logout");
        toolBar1.add(logoutButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }


    @Getter
    private static class ChatMessagePanel {
        private JLabel usernameLabel;
        private JTextArea messageTextArea;
        private JPanel messagePanel;

        public ChatMessagePanel(User sender, String message) {
            this.usernameLabel.setText(sender.getUsername() + ": ");
            this.usernameLabel.setToolTipText(sender.getUsername() + "<" + sender.getUuid().toString() + ">");
            this.messageTextArea.setText(message);
            this.messageTextArea.setLineWrap(true);
            this.messageTextArea.setWrapStyleWord(true);
            usernameLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    super.mouseClicked(e);
                    if (e.getButton() != 1) return;
                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(usernameLabel.getToolTipText()), null);
                }
            });
        }

        {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
            $$$setupUI$$$();
        }

        /**
         * Method generated by IntelliJ IDEA GUI Designer
         * >>> IMPORTANT!! <<<
         * DO NOT edit this method OR call it in your code!
         *
         * @noinspection ALL
         */
        private void $$$setupUI$$$() {
            messagePanel = new JPanel();
            messagePanel.setLayout(new GridLayoutManager(1, 2, new Insets(1, 1, 1, 1), -1, -1));
            usernameLabel = new JLabel();
            Font usernameLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, usernameLabel.getFont());
            if (usernameLabelFont != null) usernameLabel.setFont(usernameLabelFont);
            usernameLabel.setText("Username");
            messagePanel.add(usernameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
            messageTextArea = new JTextArea();
            messageTextArea.setEditable(false);
            messageTextArea.setWrapStyleWord(true);
            messagePanel.add(messageTextArea, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(100, -1), new Dimension(100, 0), null, 0, false));
        }

        /**
         * @noinspection ALL
         */
        private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
            if (currentFont == null) return null;
            String resultName;
            if (fontName == null) {
                resultName = currentFont.getName();
            } else {
                Font testFont = new Font(fontName, Font.PLAIN, 10);
                if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                    resultName = fontName;
                } else {
                    resultName = currentFont.getName();
                }
            }
            return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        }

        /**
         * @noinspection ALL
         */
        public JComponent $$$getRootComponent$$$() {
            return messagePanel;
        }

    }
}
